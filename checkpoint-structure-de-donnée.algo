ALGORITHM distnct 1
VAR
  tab1 : ARRAY_OF INTEGER;
  tab2 : ARRAY_OF INTEGER;
  tab3 : ARRAY_OF INTEGER;
  i:INTEGER;
  j:INTEGER :=0;
  k:INTEGER :=0;
  
BEGIN
FOR (i:=0 ; i<=lenghth.tab1 ; i++);
WHILE (tab1[i]=tab2[j]]) DO
    tab3[k]:=tab1[i];
    j++;
    k++;
END_WHILE
END_FOR
Write(tab3)
END

ALGORITHM distnct 2
VAR
  tab1 : ARRAY_OF INTEGER;
  tab2 : ARRAY_OF INTEGER;
  stk : stack;
  i:INTEGER;
  j:INTEGER :=0;
  k:INTEGER :=0;


BEGIN
FOR (i:=0 ; i<=lenghth.tab1 ; i++);
WHILE (tab1[i]=tab2[j]]) DO
    stk.push(tab[i]);
    j++;
    k++;
END_WHILE
END_FOR
Write("éléments distincts",stk)
END

ALGORITHM somme-egal1
VAR
  tab1 : ARRAY_OF INTEGER;
  tab2 : ARRAY_OF INTEGER;
  tab3 : ARRAY_OF INTEGER;
  i:INTEGER;
  j:INTEGER :=0;
  k:INTEGER :=0;
  t:INTEGER :=0;
  som:INTEGER :=0;
  
BEGIN
FOR (i:=0 ; i<=lenghth.tab1 ; i++);
WHILE (tab1[i]=tab2[j]]) DO
    tab3[k]:=tab1[i]*2;
    j++;
    k++;
END_WHILE
END_FOR
FOR (t:=0; t<=lenghth.tab3; t++)
som:=som+tab3[t];
END_FOR
Write(som)
END

ALGORITHM somme-egal2
VAR
  tab1 : ARRAY_OF INTEGER;
  tab2 : ARRAY_OF INTEGER;
  stk3 : stack;
  i:INTEGER;
  j:INTEGER :=0;
  som:INTEGER :=0;

BEGIN
FOR (i:=0 ; i<=lenghth.tab1 ; i++);
WHILE (tab1[i]=tab2[j]]) DO
    stk3.push(tab1[i]);
    j++;
END_WHILE
END_FOR
WHILE (NOT stk3.isEmpty ) DO
    som:=(som+(stk3.pop()*2));
END_WHILE
Write(som)
END
